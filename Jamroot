import type ;

local BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;

use-project /boost            : $(BOOST_ROOT) ;
use-project /test             : test ;

path-constant DIST      : ./dist ;


if ! [ type.registered BINDINGPYTHON ]
{
	type.register BINDINGPYTHON                        : : SHARED_LIB ;
	type.change-generated-target-prefix BINDINGPYTHON  : : "_" ;
}

make sequenceParser_wrap.cxx : src/sequenceParser.i : @swigCpptoPython ;
make sequenceParser.py       : src/sequenceParser.i : @swigCpptoPython ;
actions swigCpptoPython
{
	swig -c++ -python -I. -fcompact -o $(<) $(>)
}
IMPORT $(__name__) : swigCpptoPython : : swigCpptoPython ;


project
	: requirements
		<include>src
		<library>/boost//system
		<library>/boost//filesystem
		<library>/boost//regex
	: usage-requirements
		<include>src
		<library>/boost//system
		<library>/boost//filesystem
		<library>/boost//regex
	:
		build-dir .build/
	;

lib sequence
	:
		[ glob src/*.cpp ]
	;

install sequenceLibrary
	:
		sequence
	:
		<install-dependencies>on
		<install-type>SHARED_LIB
		<variant>debug:<location>$(DIST)/debug
		<variant>release:<location>$(DIST)/release
	;



bindingpython sequenceParser
	:
		sequence
		/python
	:
		<include>.
		<implicit-dependency>sequenceParser_wrap.cxx
	;

install bindingPython
	:
		sequenceParser.py
	:
		<variant>debug:<location>$(DIST)/debug
		<variant>release:<location>$(DIST)/release
	;

install bindingPythonLibrary
	:
		sequenceParser
	:
		<variant>debug:<location>$(DIST)/debug
		<variant>release:<location>$(DIST)/release
		<install-dependencies>off
		<install-type>BINDINGPYTHON
	;

explicit test ;
explicit sequenceParser_wrap.cxx ;
explicit sequenceParser.py ;
