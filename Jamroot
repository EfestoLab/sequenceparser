import type ;

use-project /test : test ;

path-constant DIST : ./dist ;
path-constant DIST_RELEASE : $(DIST)/release ;
path-constant DIST_DEBUG   : $(DIST)/debug ;

if ! [ type.registered BINDINGPYTHON ]
{
	type.register BINDINGPYTHON                        : : SHARED_LIB ;
	type.change-generated-target-prefix BINDINGPYTHON  : : "_" ;
}

make sequenceParser_wrap.cxx : python/sequenceParser.i : @swigCpptoPythonWrap ;
actions swigCpptoPythonWrap
{
	swig -c++ -python -I. -o $(<) $(>)
}
IMPORT $(__name__) : swigCpptoPythonWrap : : swigCpptoPythonWrap ;

make sequenceParser.py : python/sequenceParser.i : @swigCpptoPythonRelease : <variant>release ;
make sequenceParser.py : python/sequenceParser.i : @swigCpptoPythonDebug   : <variant>debug ;
actions swigCpptoPythonRelease
{
	swig -c++ -python -I. -outdir $(DIST_RELEASE) $(>)
}
actions swigCpptoPythonDebug
{
	swig -c++ -python -I. -outdir $(DIST_DEBUG) $(>)
}


project
	: requirements
		<include>src
		<include>include
		<library>/boost//system
		<library>/boost//filesystem
		<library>/boost//regex

		<os>LINUX:<define>__LINUX__
	: usage-requirements
		<include>src
		<include>include
		<library>/boost//system
		<library>/boost//filesystem
		<library>/boost//regex
		<os>LINUX:<define>__LINUX__
	:
		build-dir .build/
	;

lib sequence
	:
		[ glob src/*.cpp ]
	;

install sequenceLibrary
	:
		sequence
	:
		<install-dependencies>on
		<install-type>SHARED_LIB
		<variant>debug:<location>$(DIST_DEBUG)
		<variant>release:<location>$(DIST_RELEASE)
	;



bindingpython sequenceParser
	:
		sequence
		/python
		sequenceParser_wrap.cxx
	:
		<include>.
	;

install bindingPython
	:
		sequenceParser.py
		[ glob examples/*.py ]
	:
		<variant>debug:<location>$(DIST_DEBUG)
		<variant>release:<location>$(DIST_RELEASE)
	;

install bindingPythonLibrary
	:
		sequenceParser
	:
		<variant>debug:<location>$(DIST_DEBUG)
		<variant>release:<location>$(DIST_RELEASE)
		<install-dependencies>off
		<install-type>BINDINGPYTHON
	;

explicit test ;
explicit sequenceParser_wrap.cxx ;
explicit sequenceParser.py ;
